plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.zb'
version = '0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = '0.8.10'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    implementation(platform("software.amazon.awssdk:bom:2.27.21"))
    implementation("software.amazon.awssdk:s3")

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    named("main") {
        java.srcDirs("src/main/java", "src/main/generated")
    }
}

tasks.register('jacocoTestReports', JacocoReport) {
    dependsOn tasks.named('test')

    reports {
        html.required.set(true)
        xml.required.set(true)
        html.destination(layout.buildDirectory.dir("reports/jacoco/html").get().asFile)
        xml.destination(layout.buildDirectory.dir("reports/jacoco/jacocoTestReport.xml").get().asFile)

        def Qdomains = [
                '**/QA*', '**/QB*', '**/QC*', '**/QD*', '**/QE*',
                '**/QF*', '**/QG*', '**/QH*', '**/QI*', '**/QJ*',
                '**/QK*', '**/QL*', '**/QM*', '**/QN*', '**/QO*',
                '**/QP*', '**/QQ*', '**/QR*', '**/QS*', '**/QT*',
                '**/QU*', '**/QV*', '**/QW*', '**/QX*', '**/QY*',
                '**/QZ*'
        ]

        classDirectories.setFrom files(java.sourceSets.named("main").get().output.classesDirs.files.collect {
            fileTree(dir: it, exclude: Qdomains)
        })
    }

    sourceDirectories.from(sourceSets.named("main").get().allSource.srcDirs)
    classDirectories.from(sourceSets.named("main").get().output.classesDirs)
    executionData.from(fileTree(layout.buildDirectory.get().asFile) {
        include("reports/jacoco/test.exec")
    })
}

tasks.named('test', Test) {
    useJUnitPlatform()
    jvmArgs "-Xshare:off"
}

tasks.named('compileJava', JavaCompile) {
    options.generatedSourceOutputDirectory.set(layout.buildDirectory.dir("generated").get().asFile)
}

clean {
    delete file("$buildDir/generated")
}

